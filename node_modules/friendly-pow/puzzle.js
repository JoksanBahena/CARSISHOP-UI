import { expiryToDurationInSeconds } from "./encoding";
import { CHALLENGE_SIZE_BYTES } from "./constants";
export const PUZZLE_TIMESTAMP_OFFSET = 0;
export const ACCOUNT_ID_OFFSET = 4;
export const APP_ID_OFFSET = 8;
export const PUZZLE_VERSION_OFFSET = 12;
export const PUZZLE_EXPIRY_OFFSET = 13;
export const NUMBER_OF_PUZZLES_OFFSET = 14;
export const PUZZLE_DIFFICULTY_OFFSET = 15;
export const PUZZLE_NONCE_OFFSET = 24;
export const PUZZLE_USER_DATA_OFFSET = 32;
export const PUZZLE_USER_DATA_MAX_LENGTH = 32;
export function getPuzzleSolverInputs(puzzleBuffer, numPuzzles) {
    const startingPoints = [];
    for (let i = 0; i < numPuzzles; i++) {
        const input = new Uint8Array(CHALLENGE_SIZE_BYTES);
        input.set(puzzleBuffer);
        input[120] = i;
        startingPoints.push(input);
    }
    return startingPoints;
}
/**
 * Combine multiple solutions (8 byte values) into a single array
 * @param solutions
 */
export function combineSolutions(solutions) {
    const combined = new Uint8Array(solutions.length * 8);
    for (let i = 0; i < solutions.length; i++) {
        combined.set(solutions[i], i * 8);
    }
    return combined;
}
/**
 * Time in seconds the puzzle is valid for.
 * @param puzzleBuffer
 */
export function getPuzzleTTL(puzzleBuffer) {
    return expiryToDurationInSeconds(puzzleBuffer[PUZZLE_EXPIRY_OFFSET]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHV6emxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3B1enpsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsQ0FBQztBQUN6QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLEVBQUUsQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxFQUFFLENBQUM7QUFFOUMsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFlBQXdCLEVBQUUsVUFBa0I7SUFDaEYsTUFBTSxjQUFjLEdBQWlCLEVBQUUsQ0FBQztJQUV4QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4QixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM1QjtJQUNELE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsU0FBdUI7SUFDdEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN6QyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxZQUF3QjtJQUNuRCxPQUFPLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFDdkUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGlyeVRvRHVyYXRpb25JblNlY29uZHMgfSBmcm9tIFwiLi9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgQ0hBTExFTkdFX1NJWkVfQllURVMgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGNvbnN0IFBVWlpMRV9USU1FU1RBTVBfT0ZGU0VUID0gMDtcbmV4cG9ydCBjb25zdCBBQ0NPVU5UX0lEX09GRlNFVCA9IDQ7XG5leHBvcnQgY29uc3QgQVBQX0lEX09GRlNFVCA9IDg7XG5leHBvcnQgY29uc3QgUFVaWkxFX1ZFUlNJT05fT0ZGU0VUID0gMTI7XG5leHBvcnQgY29uc3QgUFVaWkxFX0VYUElSWV9PRkZTRVQgPSAxMztcbmV4cG9ydCBjb25zdCBOVU1CRVJfT0ZfUFVaWkxFU19PRkZTRVQgPSAxNDtcbmV4cG9ydCBjb25zdCBQVVpaTEVfRElGRklDVUxUWV9PRkZTRVQgPSAxNTtcbmV4cG9ydCBjb25zdCBQVVpaTEVfTk9OQ0VfT0ZGU0VUID0gMjQ7XG5leHBvcnQgY29uc3QgUFVaWkxFX1VTRVJfREFUQV9PRkZTRVQgPSAzMjtcblxuZXhwb3J0IGNvbnN0IFBVWlpMRV9VU0VSX0RBVEFfTUFYX0xFTkdUSCA9IDMyO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHV6emxlU29sdmVySW5wdXRzKHB1enpsZUJ1ZmZlcjogVWludDhBcnJheSwgbnVtUHV6emxlczogbnVtYmVyKTogVWludDhBcnJheVtdIHtcbiAgY29uc3Qgc3RhcnRpbmdQb2ludHM6IFVpbnQ4QXJyYXlbXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUHV6emxlczsgaSsrKSB7XG4gICAgY29uc3QgaW5wdXQgPSBuZXcgVWludDhBcnJheShDSEFMTEVOR0VfU0laRV9CWVRFUyk7XG4gICAgaW5wdXQuc2V0KHB1enpsZUJ1ZmZlcik7XG4gICAgaW5wdXRbMTIwXSA9IGk7XG4gICAgc3RhcnRpbmdQb2ludHMucHVzaChpbnB1dCk7XG4gIH1cbiAgcmV0dXJuIHN0YXJ0aW5nUG9pbnRzO1xufVxuXG4vKipcbiAqIENvbWJpbmUgbXVsdGlwbGUgc29sdXRpb25zICg4IGJ5dGUgdmFsdWVzKSBpbnRvIGEgc2luZ2xlIGFycmF5XG4gKiBAcGFyYW0gc29sdXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lU29sdXRpb25zKHNvbHV0aW9uczogVWludDhBcnJheVtdKTogVWludDhBcnJheSB7XG4gIGNvbnN0IGNvbWJpbmVkID0gbmV3IFVpbnQ4QXJyYXkoc29sdXRpb25zLmxlbmd0aCAqIDgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNvbHV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbWJpbmVkLnNldChzb2x1dGlvbnNbaV0sIGkgKiA4KTtcbiAgfVxuICByZXR1cm4gY29tYmluZWQ7XG59XG5cbi8qKlxuICogVGltZSBpbiBzZWNvbmRzIHRoZSBwdXp6bGUgaXMgdmFsaWQgZm9yLlxuICogQHBhcmFtIHB1enpsZUJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHV6emxlVFRMKHB1enpsZUJ1ZmZlcjogVWludDhBcnJheSkge1xuICByZXR1cm4gZXhwaXJ5VG9EdXJhdGlvbkluU2Vjb25kcyhwdXp6bGVCdWZmZXJbUFVaWkxFX0VYUElSWV9PRkZTRVRdKTtcbn1cbiJdfQ==